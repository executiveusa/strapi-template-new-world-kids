import { describe, it, expect } from 'vitest';
import {
  generateEnv,
  sanitizeKey,
  isValidKey,
  escapeValue,
  parseEnv,
  mergeEnv,
} from '@/lib/envgen';

describe('envgen', () => {
  describe('sanitizeKey', () => {
    it('should sanitize valid keys', () => {
      expect(sanitizeKey('DATABASE_URL')).toBe('DATABASE_URL');
      expect(sanitizeKey('api_key')).toBe('API_KEY');
      expect(sanitizeKey('my-var')).toBe('MY_VAR');
    });

    it('should remove invalid characters', () => {
      expect(sanitizeKey('my var')).toBe('MY_VAR');
      expect(sanitizeKey('my@var')).toBe('MY_VAR');
      expect(sanitizeKey('my.var')).toBe('MY_VAR');
    });

    it('should handle leading numbers', () => {
      expect(sanitizeKey('123_VAR')).toBe('_123_VAR');
    });

    it('should remove control characters', () => {
      expect(sanitizeKey('VAR\n\t')).toBe('VAR');
    });
  });

  describe('isValidKey', () => {
    it('should validate correct keys', () => {
      expect(isValidKey('DATABASE_URL')).toBe(true);
      expect(isValidKey('_PRIVATE')).toBe(true);
      expect(isValidKey('VAR_123')).toBe(true);
    });

    it('should reject invalid keys', () => {
      expect(isValidKey('123VAR')).toBe(false);
      expect(isValidKey('my-var')).toBe(false);
      expect(isValidKey('my var')).toBe(false);
    });
  });

  describe('escapeValue', () => {
    it('should not escape simple values', () => {
      expect(escapeValue('simple')).toBe('simple');
      expect(escapeValue('value123')).toBe('value123');
    });

    it('should escape values with special characters', () => {
      expect(escapeValue('has space')).toBe('"has space"');
      expect(escapeValue('has"quote')).toBe('"has\\"quote"');
      expect(escapeValue('has$dollar')).toBe('"has$dollar"');
    });
  });

  describe('generateEnv', () => {
    it('should generate env from template', () => {
      const result = generateEnv({
        stack: ['openai'],
        overrides: {
          OPENAI_API_KEY: 'sk-test123',
        },
        includeComments: false,
      });

      expect(result.content).toContain('OPENAI_API_KEY=sk-test123');
      expect(result.errors).toHaveLength(0);
    });

    it('should handle multiple templates', () => {
      const result = generateEnv({
        stack: ['openai', 'anthropic'],
        overrides: {
          OPENAI_API_KEY: 'sk-test',
          ANTHROPIC_API_KEY: 'sk-ant-test',
        },
        includeComments: false,
      });

      expect(result.content).toContain('OPENAI_API_KEY=sk-test');
      expect(result.content).toContain('ANTHROPIC_API_KEY=sk-ant-test');
    });

    it('should include comments when requested', () => {
      const result = generateEnv({
        stack: ['openai'],
        overrides: {
          OPENAI_API_KEY: 'sk-test',
        },
        includeComments: true,
      });

      expect(result.content).toContain('# Generated by EnvSmith');
      expect(result.content).toContain('# OpenAI API key');
    });

    it('should warn about missing required variables', () => {
      const result = generateEnv({
        stack: ['openai'],
        overrides: {},
        includeComments: false,
      });

      expect(result.errors.length).toBeGreaterThan(0);
    });

    it('should handle custom overrides', () => {
      const result = generateEnv({
        overrides: {
          CUSTOM_VAR: 'value',
          ANOTHER_VAR: 'another',
        },
        includeComments: false,
      });

      expect(result.content).toContain('CUSTOM_VAR=value');
      expect(result.content).toContain('ANOTHER_VAR=another');
    });
  });

  describe('parseEnv', () => {
    it('should parse env content', () => {
      const content = `
DATABASE_URL=postgresql://localhost:5432/db
API_KEY=secret123
# Comment
PORT=3000
      `.trim();

      const parsed = parseEnv(content);

      expect(parsed.DATABASE_URL).toBe('postgresql://localhost:5432/db');
      expect(parsed.API_KEY).toBe('secret123');
      expect(parsed.PORT).toBe('3000');
    });

    it('should handle quoted values', () => {
      const content = `
VAR1="quoted value"
VAR2='single quoted'
      `.trim();

      const parsed = parseEnv(content);

      expect(parsed.VAR1).toBe('quoted value');
      expect(parsed.VAR2).toBe('single quoted');
    });

    it('should skip comments', () => {
      const content = `
# Comment
VAR=value
# Another comment
      `.trim();

      const parsed = parseEnv(content);

      expect(Object.keys(parsed)).toHaveLength(1);
      expect(parsed.VAR).toBe('value');
    });
  });

  describe('mergeEnv', () => {
    it('should merge multiple env contents', () => {
      const env1 = 'VAR1=value1\nVAR2=value2';
      const env2 = 'VAR2=updated\nVAR3=value3';

      const merged = mergeEnv(env1, env2);

      expect(merged).toContain('VAR1=value1');
      expect(merged).toContain('VAR2=updated');
      expect(merged).toContain('VAR3=value3');
    });
  });
});
